`ifndef DEFINE_STATE

// This defines the states
typedef enum logic [1:0] {
	S_IDLE,
	S_ENABLE_UART_RX,
	S_WAIT_UART_RX,
	S_MILESTONE_1
} top_state_type;

typedef enum logic [10:0] {
	S_M1_IDLE,
	S_load_0,
	S1_M1_IDLE,
	S_LOAD_0,
	S_LOAD_1,
	S_LOAD_2,
	S_LOAD_3,
	S_LOAD_4,
	S_LOAD_5,
	S_LOAD_6,	
	S_LOAD_7,
	S_LOAD_8,
	S_LOAD_9,
	S_LOAD_10,
	S_LOAD_11,
	S_LOAD_12,
	S_LOAD_13,
	S_LOAD_14,
	S_LOAD_15,
	S_LOAD_16,
	S_LOAD_17,
	S_LOAD_18,
	S_LOAD_19,
	S_LOAD_20,
	S_LOAD_21,
	S_LOAD_22,
	S_COMMON_0,
	S_COMMON_1,
	S_COMMON_2,
	S_COMMON_3,
	S_COMMON_4,
	S_COMMON_5,
	S_COMMON_6,
	S_COMMON_7,
	S_COMMON_8,
	S_COMMON_9,
	S_COMMON_10,
	S_COMMON_11,
	S_COMMON_12,
	S_LEAD_OUT_0,
	S_LEAD_OUT_1,
	S_LEAD_OUT_2,
	S_LEAD_OUT_3,
	S_LEAD_OUT_4,
	S_LEAD_OUT_5,
	S_LEAD_OUT_6,
	S_LEAD_OUT_7,
	S_LEAD_OUT_8,
	S_LEAD_OUT_9,
	S_LEAD_OUT_10,
	S_LEAD_OUT_11,
	S_LEAD_OUT_12,
	S_LEAD_OUT_13,
	S_LEAD_OUT_14,
	S_LEAD_OUT_15,
	S_LEAD_OUT_16,
	S_LEAD_OUT_17,
	S_LEAD_OUT_18,
	S_LEAD_OUT_19,
	S_LEAD_OUT_20,
	S_LEAD_OUT_21,
	S_LEAD_OUT_22,
	S_LEAD_OUT_23,
	S_LEAD_OUT_24,
	S_LEAD_OUT_25,
	S_LEAD_OUT_26,
	S_LEAD_OUT_27,
	S_LEAD_OUT_28,
	S_LEAD_OUT_29,	
	S_LEAD_OUT_30,
	S_LEAD_OUT_31,
	S_LEAD_OUT_32,
	S_LEAD_OUT_33,
	S_LEAD_OUT_34,
	S_LEAD_OUT_35,
	S_LEAD_OUT_36
} M1_state_type;

typedef enum logic [1:0] {
	S_RXC_IDLE,
	S_RXC_SYNC,
	S_RXC_ASSEMBLE_DATA,
	S_RXC_STOP_BIT
} RX_Controller_state_type;

typedef enum logic [2:0] {
	S_US_IDLE,
	S_US_STRIP_FILE_HEADER_1,
	S_US_STRIP_FILE_HEADER_2,
	S_US_START_FIRST_BYTE_RECEIVE,
	S_US_WRITE_FIRST_BYTE,
	S_US_START_SECOND_BYTE_RECEIVE,
	S_US_WRITE_SECOND_BYTE
} UART_SRAM_state_type;

typedef enum logic [3:0] {
	S_VS_WAIT_NEW_PIXEL_ROW,
	S_VS_NEW_PIXEL_ROW_DELAY_1,
	S_VS_NEW_PIXEL_ROW_DELAY_2,
	S_VS_NEW_PIXEL_ROW_DELAY_3,
	S_VS_NEW_PIXEL_ROW_DELAY_4,
	S_VS_NEW_PIXEL_ROW_DELAY_5,
	S_VS_FETCH_PIXEL_DATA_0,
	S_VS_FETCH_PIXEL_DATA_1,
	S_VS_FETCH_PIXEL_DATA_2,
	S_VS_FETCH_PIXEL_DATA_3
} VGA_SRAM_state_type;

`define DEFINE_STATE 1
`endif
