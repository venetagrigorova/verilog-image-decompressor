`ifndef DEFINE_STATE

// This defines the states
typedef enum logic [2:0] {
	S_IDLE,
	S_ENABLE_UART_RX,
	S_WAIT_UART_RX,
	S_MILESTONE_1,
	S_MILESTONE_2
} top_state_type;

typedef enum logic [10:0] {
	S_M1_IDLE,
	S_load_0,
	S1_M1_IDLE,
	S_LOAD_0,
	S_LOAD_1,
	S_LOAD_2,
	S_LOAD_3,
	S_LOAD_4,
	S_LOAD_5,
	S_LOAD_6,	
	S_LOAD_7,
	S_LOAD_8,
	S_LOAD_9,
	S_LOAD_10,
	S_LOAD_11,
	S_LOAD_12,
	S_LOAD_13,
	S_LOAD_14,
	S_LOAD_15,
	S_LOAD_16,
	S_LOAD_17,
	S_LOAD_18,
	S_LOAD_19,
	S_LOAD_20,
	S_LOAD_21,
	S_LOAD_22,
	S_COMMON_0,
	S_COMMON_1,
	S_COMMON_2,
	S_COMMON_3,
	S_COMMON_4,
	S_COMMON_5,
	S_COMMON_6,
	S_COMMON_7,
	S_COMMON_8,
	S_COMMON_9,
	S_COMMON_10,
	S_COMMON_11,
	S_COMMON_12,
	S_LEAD_OUT_0,
	S_LEAD_OUT_1,
	S_LEAD_OUT_2,
	S_LEAD_OUT_3,
	S_LEAD_OUT_4,
	S_LEAD_OUT_5,
	S_LEAD_OUT_6,
	S_LEAD_OUT_7,
	S_LEAD_OUT_8,
	S_LEAD_OUT_9,
	S_LEAD_OUT_10,
	S_LEAD_OUT_11,
	S_LEAD_OUT_12,
	S_LEAD_OUT_13,
	S_LEAD_OUT_14,
	S_LEAD_OUT_15,
	S_LEAD_OUT_16,
	S_LEAD_OUT_17,
	S_LEAD_OUT_18,
	S_LEAD_OUT_19,
	S_LEAD_OUT_20,
	S_LEAD_OUT_21,
	S_LEAD_OUT_22,
	S_LEAD_OUT_23,
	S_LEAD_OUT_24,
	S_LEAD_OUT_25,
	S_LEAD_OUT_26,
	S_LEAD_OUT_27,
	S_LEAD_OUT_28,
	S_LEAD_OUT_29,	
	S_LEAD_OUT_30,
	S_LEAD_OUT_31,
	S_LEAD_OUT_32,
	S_LEAD_OUT_33,
	S_LEAD_OUT_34,
	S_LEAD_OUT_35,
	S_LEAD_OUT_36
} M1_state_type;

typedef enum logic [10:0] {
	S_M2_IDLE,
	S_MEGASTART_DELAY_0,
	
	S_LOAD_SP_LI_00,
	S_LOAD_SP_LI_01,
	S_LOAD_SP_LI_02,
	S_LOAD_SP_LI_9,
	S_LOAD_SP_LI_10,
	S_LOAD_SP_LI_11,
	S_LOAD_SP_LI_12,
	S_LOAD_SP_LI_13,
	S_LOAD_SP_LI_14,
	S_LOAD_SP_LI_15,
	S_LOAD_SP_LI_16,
	S_LOAD_SP_1,
	S_LOAD_SP_2,
	S_LOAD_SP_3,
	S_LOAD_SP_4,
	S_LOAD_SP_5,
	S_LOAD_SP_6,
	S_LOAD_SP_7,
	S_LOAD_SP_8,
	S_LOAD_SP_9,
	S_LOAD_SP_10,
	S_LOAD_SP_11,
	S_LOAD_SP_12,
	S_LOAD_SP_13,
	S_LOAD_SP_14,
	S_LOAD_SP_15,
	S_LOAD_SP_16,
	S_LOAD_SP_LO_1,
	S_LOAD_SP_LO_2,
	S_LOAD_SP_LO_3,
	S_LOAD_SP_LO_4,
	S_LOAD_SP_LO_5,
	S_LOAD_SP_LO_6,
	S_LOAD_SP_LO_7,
	S_LOAD_SP_LO_8,
	S_LOAD_SP_LO_9,
	S_LOAD_SP_LO_10,
	
	S_LOAD_T_LI_00,
	S_LOAD_T_LI_01,
	S_LOAD_T_LI_02,
	S_LOAD_T_LI_9,
	S_LOAD_T_LI_10,
	S_LOAD_T_LI_11,
	S_LOAD_T_LI_12,
	S_LOAD_T_LI_13,
	S_LOAD_T_LI_14,
	S_LOAD_T_LI_15,
	S_LOAD_T_LI_16,
	S_LOAD_T_1,
	S_LOAD_T_2,
	S_LOAD_T_3,
	S_LOAD_T_4,
	S_LOAD_T_5,
	S_LOAD_T_6,
	S_LOAD_T_7,
	S_LOAD_T_8,
	S_LOAD_T_9,
	S_LOAD_T_10,
	S_LOAD_T_11,
	S_LOAD_T_12,
	S_LOAD_T_13,
	S_LOAD_T_14,
	S_LOAD_T_15,
	S_LOAD_T_16,
	S_LOAD_T_LO_1,
	S_LOAD_T_LO_2,
	S_LOAD_T_LO_3,
	S_LOAD_T_LO_4,
	S_LOAD_T_LO_5,
	S_LOAD_T_LO_6,
	S_LOAD_T_LO_7,
	S_LOAD_T_LO_8,
	S_LOAD_T_LO_9,
	S_LOAD_T_LO_10,
	S_LOAD_T_LO_11,
	S_LOAD_T_LO_12,
	S_LOAD_T_LO_13,
	S_LOAD_T_LO_14,
	S_LOAD_T_LO_15,
	S_LOAD_T_LO_16,
	S_LOAD_T_LO_17,
	
	S_MS_A_LI_00,
	S_MS_A_LI_01,
	S_MS_A_LI_02,
	S_MS_A_LI_9,
	S_MS_A_LI_10,
	S_MS_A_LI_11,
	S_MS_A_LI_12,
	S_MS_A_LI_13,
	S_MS_A_LI_14,
	S_MS_A_LI_15,
	S_MS_A_LI_16,
	S_MS_A_1,
	S_MS_A_2,
	S_MS_A_3,
	S_MS_A_4,
	S_MS_A_5,
	S_MS_A_6,
	S_MS_A_7,
	S_MS_A_8,
	S_MS_A_9,
	S_MS_A_10,
	S_MS_A_11,
	S_MS_A_12,
	S_MS_A_13,
	S_MS_A_14,
	S_MS_A_15,
	S_MS_A_16,
	S_MS_A_LO_1,
	S_MS_A_LO_2,
	S_MS_A_LO_3,
	S_MS_A_LO_4,
	S_MS_A_LO_5,
	S_MS_A_LO_6,
	S_MS_A_LO_7,
	S_MS_A_LO_8,
	S_MS_A_LO_9,
	S_MS_A_LO_10,
	S_MS_A_LO_11,
	S_MS_A_LO_12,
	S_MS_A_LO_13,
	S_MS_A_LO_14,
	S_MS_A_LO_15,
	S_MS_A_LO_16,
	S_MS_A_LO_17,
	
	S_MS_B_LI_00,
	S_MS_B_LI_01,
	S_MS_B_LI_02,
	S_MS_B_LI_9,
	S_MS_B_LI_10,
	S_MS_B_LI_11,
	S_MS_B_LI_12,
	S_MS_B_LI_13,
	S_MS_B_LI_14,
	S_MS_B_LI_15,
	S_MS_B_LI_16,
	S_MS_B_1,
	S_MS_B_2,
	S_MS_B_3,
	S_MS_B_4,
	S_MS_B_5,
	S_MS_B_6,
	S_MS_B_7,
	S_MS_B_8,
	S_MS_B_9,
	S_MS_B_10,
	S_MS_B_11,
	S_MS_B_12,
	S_MS_B_13,
	S_MS_B_14,
	S_MS_B_15,
	S_MS_B_16,
	S_MS_B_LO_1,
	S_MS_B_LO_2,
	S_MS_B_LO_3,
	S_MS_B_LO_4,
	S_MS_B_LO_5,
	S_MS_B_LO_6,
	S_MS_B_LO_7,
	S_MS_B_LO_8,
	S_MS_B_LO_9,
	S_MS_B_LO_10,
	S_MS_B_LO_11,
	S_MS_B_LO_12,
	S_MS_B_LO_13,
	S_MS_B_LO_14,
	S_MS_B_LO_15,
	S_MS_B_LO_16,
	S_MS_B_LO_17,	
	S_MEGASTATE_END
} M2_state_type;

typedef enum logic [1:0] {
	S_RXC_IDLE,
	S_RXC_SYNC,
	S_RXC_ASSEMBLE_DATA,
	S_RXC_STOP_BIT
} RX_Controller_state_type;

typedef enum logic [2:0] {
	S_US_IDLE,
	S_US_STRIP_FILE_HEADER_1,
	S_US_STRIP_FILE_HEADER_2,
	S_US_START_FIRST_BYTE_RECEIVE,
	S_US_WRITE_FIRST_BYTE,
	S_US_START_SECOND_BYTE_RECEIVE,
	S_US_WRITE_SECOND_BYTE
} UART_SRAM_state_type;

typedef enum logic [3:0] {
	S_VS_WAIT_NEW_PIXEL_ROW,
	S_VS_NEW_PIXEL_ROW_DELAY_1,
	S_VS_NEW_PIXEL_ROW_DELAY_2,
	S_VS_NEW_PIXEL_ROW_DELAY_3,
	S_VS_NEW_PIXEL_ROW_DELAY_4,
	S_VS_NEW_PIXEL_ROW_DELAY_5,
	S_VS_FETCH_PIXEL_DATA_0,
	S_VS_FETCH_PIXEL_DATA_1,
	S_VS_FETCH_PIXEL_DATA_2,
	S_VS_FETCH_PIXEL_DATA_3
} VGA_SRAM_state_type;

`define DEFINE_STATE 1
`endif
